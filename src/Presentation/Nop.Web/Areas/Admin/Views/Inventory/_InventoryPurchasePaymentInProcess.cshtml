@model InventoryPurchasePaymentSearchModel

@{
    const string hideSearchBlockAttributeName = "InventoriesPage.Approval.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<div class="form-horizontal">
    <div class="panel-body">
        @await Html.PartialAsync("Table", new DataTablesModel
   {
       Name = "inventory-purchase-payment-inprocess-grid",
       UrlRead = new DataUrl("GetMyPurchasePaymentRecords", "Inventory"),
       Length = Model.PageSize,
       LengthMenu = Model.AvailablePageSizes,
       ColumnCollection = new List<ColumnProperty>
       {
                    new ColumnProperty(nameof(InventoryPurchasePaymentModel.Status))
            {
                    Title = T("Admin.Common.PaymentStatus").Text,
                    ClassName =  NopColumnClassDefaults.Button,
                    Render = new RenderCustom("renderInventoryPurchaseStatus")
            },
                 new ColumnProperty(nameof(InventoryPurchasePaymentModel.CreatedOn))
       {
           Title = T("Admin.Common.CreatedOn").Text
       },

           new ColumnProperty(nameof(InventoryPurchasePaymentModel.Note))
            {
                Title = T("Admin.Common.Note").Text
            },
      new ColumnProperty(nameof(InventoryPurchasePaymentModel.Total))
       {
           Title = T("Admin.Common.Total").Text
       },
       new ColumnProperty(nameof(InventoryPurchasePaymentModel.DownloadId))
       {
           Title = T("Admin.Orders.OrderNotes.Fields.Download").Text,
                    Width = "200",
                    ClassName =  NopColumnClassDefaults.Button,
                    Render = new RenderCustom("renderColumnDownloadId")
       },

           new ColumnProperty(nameof(InventoryPurchaseModel.Id))
       {
            ClassName =  NopColumnClassDefaults.Button,
           Render = new RenderButtonView(new DataUrl("EditPayment"))

       }
   }
   })
    </div>
</div>

<script>                           
            function renderColumnDownloadId(data, type, row, meta) {
                return (row.DownloadId > 0) ? '<a class="btn btn-default" href="@Url.Content("~/Admin/Download/DownloadFile")?downloadGuid=' + row.DownloadGuid + '"><i class="fa fa-download"></i>@T("Admin.Orders.OrderNotes.Fields.Download.Link")</a>' : '@T("Admin.Orders.OrderNotes.Fields.Download.Link.No")';
    }

    function renderInventoryPurchaseStatus(data, type, row, meta) {
        var color;
        switch (row.StatusId) {
            case 0:
                color = 'yellow';
                break;
            case 10:
                color = 'blue';
                break;
            case 20:
                color = 'green';
                break;
            case 30:
                color = 'red';
                break;
        }
        return '<span class="grid-report-item ' + color + '">' + data + '</span >';
    }
</script>

